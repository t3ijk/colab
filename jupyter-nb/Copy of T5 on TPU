{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/patil-suraj/exploring-T5/blob/master/T5_on_TPU.ipynb","timestamp":1696906985832}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"_6q2San5Xh5N"},"source":["# T5 on TPU 💥🚀"]},{"cell_type":"markdown","metadata":{"id":"knpacarPX2AN"},"source":["In this notebook we will see how to train T5 model on TPU with Huggingface's awesome new [trainer](https://github.com/huggingface/transformers/blob/master/src/transformers/trainer.py). We will train T5 base model on SQUAD dataset for QA task. We will use the recently released amazing [nlp](https://github.com/huggingface/nlp) package to load and process the dataset in just few lines.\n","\n","First make sure you are connected to the high RAM instance. This will not work on 12 GB colab instance."]},{"cell_type":"code","metadata":{"id":"QLGiFCDqvuil"},"source":["# Crash on purpose to get more ram :\n","import torch\n","torch.tensor([10.]*10000000000)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"40CJSrN9ZiIP"},"source":["Let's install [PyTorch/XLA](https://github.com/pytorch/xla) which enables PyTorch on TPU. Make sure you install the nightly version, as the trainer breaks on other versions."]},{"cell_type":"code","metadata":{"id":"coOmS2s_xDBy","outputId":"0c1b31b4-7950-48ed-9353-3407a020485e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696907173791,"user_tz":-480,"elapsed":73198,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["VERSION = \"nightly\"  #@param [\"1.5\" , \"20200325\", \"nightly\"]\n","!curl https://raw.githubusercontent.com/pytorch/xla/master/contrib/scripts/env-setup.py -o pytorch-xla-env-setup.py\n","!python pytorch-xla-env-setup.py --version $VERSION"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","100  6028  100  6028    0     0  19508      0 --:--:-- --:--:-- --:--:-- 19508\n","Updating... This may take around 2 minutes.\n","Updating TPU runtime to pytorch-nightly ...\n","Found existing installation: torch 2.0.1+cu118\n","Collecting cloud-tpu-client\n","  Downloading cloud_tpu_client-0.10-py3-none-any.whl (7.4 kB)\n","Collecting google-api-python-client==1.8.0 (from cloud-tpu-client)\n","  Downloading google_api_python_client-1.8.0-py3-none-any.whl (57 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/57.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0mUninstalling torch-2.0.1+cu118:\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.7/57.7 kB\u001b[0m \u001b[31m1.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: oauth2client in /usr/local/lib/python3.10/dist-packages (from cloud-tpu-client) (4.1.3)\n","Requirement already satisfied: httplib2<1dev,>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client==1.8.0->cloud-tpu-client) (0.22.0)\n","Requirement already satisfied: google-auth>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client==1.8.0->cloud-tpu-client) (2.17.3)\n","Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client==1.8.0->cloud-tpu-client) (0.1.1)\n","Collecting google-api-core<2dev,>=1.13.0 (from google-api-python-client==1.8.0->cloud-tpu-client)\n","  Downloading google_api_core-1.34.0-py3-none-any.whl (120 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m120.2/120.2 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: six<2dev,>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client==1.8.0->cloud-tpu-client) (1.16.0)\n","Collecting uritemplate<4dev,>=3.0.0 (from google-api-python-client==1.8.0->cloud-tpu-client)\n","  Downloading uritemplate-3.0.1-py2.py3-none-any.whl (15 kB)\n","Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python3.10/dist-packages (from oauth2client->cloud-tpu-client) (0.5.0)\n","Requirement already satisfied: pyasn1-modules>=0.0.5 in /usr/local/lib/python3.10/dist-packages (from oauth2client->cloud-tpu-client) (0.3.0)\n","Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from oauth2client->cloud-tpu-client) (4.9)\n","Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (1.60.0)\n","Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (3.20.3)\n","Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (2.31.0)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->google-api-python-client==1.8.0->cloud-tpu-client) (5.3.1)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1dev,>=0.9.2->google-api-python-client==1.8.0->cloud-tpu-client) (3.1.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (2.0.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.13.0->google-api-python-client==1.8.0->cloud-tpu-client) (2023.7.22)\n","\u001b[33mWARNING: Error parsing requirements for torch: [Errno 2] No such file or directory: '/usr/local/lib/python3.10/dist-packages/torch-2.0.1+cu118.dist-info/METADATA'\u001b[0m\u001b[33m\n","\u001b[0mInstalling collected packages: uritemplate, google-api-core, google-api-python-client, cloud-tpu-client\n","  Attempting uninstall: uritemplate\n","    Found existing installation: uritemplate 4.1.1\n","    Uninstalling uritemplate-4.1.1:\n","      Successfully uninstalled uritemplate-4.1.1\n","  Attempting uninstall: google-api-core\n","    Found existing installation: google-api-core 2.11.1\n","    Uninstalling google-api-core-2.11.1:\n","      Successfully uninstalled google-api-core-2.11.1\n","  Attempting uninstall: google-api-python-client\n","    Found existing installation: google-api-python-client 2.84.0\n","    Uninstalling google-api-python-client-2.84.0:\n","      Successfully uninstalled google-api-python-client-2.84.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","pydrive2 1.6.3 requires google-api-python-client>=1.12.5, but you have google-api-python-client 1.8.0 which is incompatible.\n","earthengine-api 0.1.373 requires google-api-python-client>=1.12.1, but you have google-api-python-client 1.8.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed cloud-tpu-client-0.10 google-api-core-1.34.0 google-api-python-client-1.8.0 uritemplate-3.0.1\n","Done updating TPU runtime\n","  Successfully uninstalled torch-2.0.1+cu118\n","Found existing installation: torchvision 0.15.2+cu118\n","Uninstalling torchvision-0.15.2+cu118:\n","  Successfully uninstalled torchvision-0.15.2+cu118\n","CommandException: No URLs matched: gs://tpu-pytorch/wheels/colab/torch-nightly-cp310-cp310-linux_x86_64.whl\n","CommandException: No URLs matched: gs://tpu-pytorch/wheels/colab/torch_xla-nightly-cp310-cp310-linux_x86_64.whl\n","CommandException: No URLs matched: gs://tpu-pytorch/wheels/colab/torchvision-nightly-cp310-cp310-linux_x86_64.whl\n","\u001b[33mWARNING: Requirement 'torch-nightly-cp310-cp310-linux_x86_64.whl' looks like a filename, but the file does not exist\u001b[0m\u001b[33m\n","\u001b[0mProcessing ./torch-nightly-cp310-cp310-linux_x86_64.whl\n","\u001b[31mERROR: Could not install packages due to an OSError: [Errno 2] No such file or directory: '/content/torch-nightly-cp310-cp310-linux_x86_64.whl'\n","\u001b[0m\u001b[31m\n","\u001b[0m\u001b[33mWARNING: Requirement 'torch_xla-nightly-cp310-cp310-linux_x86_64.whl' looks like a filename, but the file does not exist\u001b[0m\u001b[33m\n","\u001b[0mProcessing ./torch_xla-nightly-cp310-cp310-linux_x86_64.whl\n","\u001b[31mERROR: Could not install packages due to an OSError: [Errno 2] No such file or directory: '/content/torch_xla-nightly-cp310-cp310-linux_x86_64.whl'\n","\u001b[0m\u001b[31m\n","\u001b[0m\u001b[33mWARNING: Requirement 'torchvision-nightly-cp310-cp310-linux_x86_64.whl' looks like a filename, but the file does not exist\u001b[0m\u001b[33m\n","\u001b[0mProcessing ./torchvision-nightly-cp310-cp310-linux_x86_64.whl\n","\u001b[31mERROR: Could not install packages due to an OSError: [Errno 2] No such file or directory: '/content/torchvision-nightly-cp310-cp310-linux_x86_64.whl'\n","\u001b[0m\u001b[31m\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following additional packages will be installed:\n","  libomp5-14\n","The following NEW packages will be installed:\n","  libomp5 libomp5-14\n","0 upgraded, 2 newly installed, 0 to remove and 18 not upgraded.\n","Need to get 392 kB of archives.\n","After this operation, 2,413 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 libomp5-14 amd64 1:14.0.0-1ubuntu1.1 [389 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libomp5 amd64 1:14.0-55~exp2 [3,060 B]\n","Fetched 392 kB in 0s (984 kB/s)\n","Selecting previously unselected package libomp5-14:amd64.\n","(Reading database ... 120875 files and directories currently installed.)\n","Preparing to unpack .../libomp5-14_1%3a14.0.0-1ubuntu1.1_amd64.deb ...\n","Unpacking libomp5-14:amd64 (1:14.0.0-1ubuntu1.1) ...\n","Selecting previously unselected package libomp5:amd64.\n","Preparing to unpack .../libomp5_1%3a14.0-55~exp2_amd64.deb ...\n","Unpacking libomp5:amd64 (1:14.0-55~exp2) ...\n","Setting up libomp5-14:amd64 (1:14.0.0-1ubuntu1.1) ...\n","Setting up libomp5:amd64 (1:14.0-55~exp2) ...\n","Processing triggers for libc-bin (2.35-0ubuntu3.1) ...\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"6-p80vyFZ-S8"},"source":["Install transformers and the nlp package. Restart colab after this"]},{"cell_type":"code","metadata":{"id":"ptPupnLsfkMH","outputId":"ad85d8b2-2752-4d91-e86a-97b30d8e8ac5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696907239650,"user_tz":-480,"elapsed":65864,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["!git clone https://github.com/huggingface/transformers.git\n","!pip install ./transformers\n","!pip install -U nlp"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'transformers'...\n","remote: Enumerating objects: 161952, done.\u001b[K\n","remote: Counting objects: 100% (1062/1062), done.\u001b[K\n","remote: Compressing objects: 100% (604/604), done.\u001b[K\n","remote: Total 161952 (delta 543), reused 810 (delta 384), pack-reused 160890\u001b[K\n","Receiving objects: 100% (161952/161952), 161.66 MiB | 22.44 MiB/s, done.\n","Resolving deltas: 100% (121657/121657), done.\n","Processing ./transformers\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (3.12.4)\n","Collecting huggingface-hub<1.0,>=0.16.4 (from transformers==4.35.0.dev0)\n","  Downloading huggingface_hub-0.17.3-py3-none-any.whl (295 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.0/295.0 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (1.23.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (23.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (2023.6.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (2.31.0)\n","Collecting tokenizers<0.15,>=0.14 (from transformers==4.35.0.dev0)\n","  Downloading tokenizers-0.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.8/3.8 MB\u001b[0m \u001b[31m60.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting safetensors>=0.3.1 (from transformers==4.35.0.dev0)\n","  Downloading safetensors-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m65.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers==4.35.0.dev0) (4.66.1)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->transformers==4.35.0.dev0) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->transformers==4.35.0.dev0) (4.5.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.35.0.dev0) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.35.0.dev0) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.35.0.dev0) (2.0.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.35.0.dev0) (2023.7.22)\n","Building wheels for collected packages: transformers\n","  Building wheel for transformers (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for transformers: filename=transformers-4.35.0.dev0-py3-none-any.whl size=7746364 sha256=14796b4b6078a08dde58fd2f221ca1aebb91ff3ad3f8b7dd87dbd150170172c4\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-8nxgvy9o/wheels/7c/35/80/e946b22a081210c6642e607ed65b2a5b9a4d9259695ee2caf5\n","Successfully built transformers\n","Installing collected packages: safetensors, huggingface-hub, tokenizers, transformers\n","Successfully installed huggingface-hub-0.17.3 safetensors-0.4.0 tokenizers-0.14.1 transformers-4.35.0.dev0\n","Collecting nlp\n","  Downloading nlp-0.4.0-py3-none-any.whl (1.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m19.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from nlp) (1.23.5)\n","Requirement already satisfied: pyarrow>=0.16.0 in /usr/local/lib/python3.10/dist-packages (from nlp) (9.0.0)\n","Collecting dill (from nlp)\n","  Downloading dill-0.3.7-py3-none-any.whl (115 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.3/115.3 kB\u001b[0m \u001b[31m12.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from nlp) (1.5.3)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from nlp) (2.31.0)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from nlp) (4.66.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from nlp) (3.12.4)\n","Collecting xxhash (from nlp)\n","  Downloading xxhash-3.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.1/194.1 kB\u001b[0m \u001b[31m19.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->nlp) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->nlp) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->nlp) (2.0.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->nlp) (2023.7.22)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->nlp) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->nlp) (2023.3.post1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->nlp) (1.16.0)\n","Installing collected packages: xxhash, dill, nlp\n","Successfully installed dill-0.3.7 nlp-0.4.0 xxhash-3.4.1\n"]}]},{"cell_type":"markdown","metadata":{"id":"zFWlfEJllAcw"},"source":["## Load and process data"]},{"cell_type":"markdown","metadata":{"id":"NVOz2QUtaKQb"},"source":["Let's load and process the dataset using the nlp library. We will process the examples in follwoing way to cast QA task in text-to-text setting\n","\n","**input**\n","question: question_text  context: context\n","\n","**target**\n","answer_text"]},{"cell_type":"code","metadata":{"id":"CaRw0ke1e1sF","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"error","timestamp":1696907239651,"user_tz":-480,"elapsed":23,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}},"outputId":"eba5cea1-b502-4bb4-d09e-12fa92180b67"},"source":["import torch\n","import nlp\n","from transformers import T5Tokenizer"],"execution_count":3,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-caf30418ab08>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnlp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtransformers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mT5Tokenizer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torch'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","metadata":{"id":"NaGYDvKUe8VS","executionInfo":{"status":"aborted","timestamp":1696907239651,"user_tz":-480,"elapsed":7,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["tokenizer = T5Tokenizer.from_pretrained('t5-base')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-gJOEe0Ye0di","executionInfo":{"status":"aborted","timestamp":1696907239651,"user_tz":-480,"elapsed":7,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["# process the examples in input and target text format and the eos token at the end\n","def add_eos_to_examples(example):\n","    example['input_text'] = 'question: %s  context: %s </s>' % (example['question'], example['context'])\n","    example['target_text'] = '%s </s>' % example['answers']['text'][0]\n","    return example\n","\n","# tokenize the examples\n","def convert_to_features(example_batch):\n","    input_encodings = tokenizer.batch_encode_plus(example_batch['input_text'], pad_to_max_length=True, max_length=512)\n","    target_encodings = tokenizer.batch_encode_plus(example_batch['target_text'], pad_to_max_length=True, max_length=16)\n","\n","    encodings = {\n","        'input_ids': input_encodings['input_ids'],\n","        'attention_mask': input_encodings['attention_mask'],\n","        'target_ids': target_encodings['input_ids'],\n","        'target_attention_mask': target_encodings['attention_mask']\n","    }\n","\n","    return encodings"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2ZWE4addfSmi","executionInfo":{"status":"aborted","timestamp":1696907239652,"user_tz":-480,"elapsed":8,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["# load train and validation split of squad\n","train_dataset  = nlp.load_dataset('squad', split=nlp.Split.TRAIN)\n","valid_dataset = nlp.load_dataset('squad', split=nlp.Split.VALIDATION)\n","\n","# map add_eos_to_examples function to the dataset example wise\n","train_dataset = train_dataset.map(add_eos_to_examples)\n","# map convert_to_features batch wise\n","train_dataset = train_dataset.map(convert_to_features, batched=True)\n","\n","valid_dataset = valid_dataset.map(add_eos_to_examples, load_from_cache_file=False)\n","valid_dataset = valid_dataset.map(convert_to_features, batched=True, load_from_cache_file=False)\n","\n","\n","# set the tensor type and the columns which the dataset should return\n","columns = ['input_ids', 'target_ids', 'attention_mask', 'target_attention_mask']\n","train_dataset.set_format(type='torch', columns=columns)\n","valid_dataset.set_format(type='torch', columns=columns)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vXJ24xVmlMoN","executionInfo":{"status":"aborted","timestamp":1696907239652,"user_tz":-480,"elapsed":8,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["len(train_dataset), len(valid_dataset)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UYOvGLdVgoxt","executionInfo":{"status":"aborted","timestamp":1696907239652,"user_tz":-480,"elapsed":7,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["# cach the dataset, so we can load it directly for training\n","\n","torch.save(train_dataset, 'train_data.pt')\n","torch.save(valid_dataset, 'valid_data.pt')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NASBkGrtnbgj"},"source":["For more details on how to use the nlp library check out this [notebook](https://colab.research.google.com/github/huggingface/nlp/blob/master/notebooks/Overview.ipynb)."]},{"cell_type":"markdown","metadata":{"id":"tty8vuMBqI5L"},"source":["## Write training script"]},{"cell_type":"markdown","metadata":{"id":"djKKcgN1cvAX"},"source":["Using the `Trainer` is pretty straightforward. Here are the 4 basic steps which are needed to use trainer.\n","\n","1. **Parse the arguments needed**. These are divided in 3 parts for clarity and seperation (TrainingArguments, ModelArguments and DataTrainingArguments).\n","\n","  1. **TrainingArguments**: These are basicaly the training hyperparameters such as learning rate, batch size, weight decay, gradient accumulation steps etc. See all possible arguments [here](https://github.com/huggingface/transformers/blob/master/src/transformers/training_args.py). These are used by the Trainer.\n","\n","  2. **ModelArguments**: These are the arguments for the model that you want to use such as the model_name_or_path, tokenizer_name etc. You'll need these to load the model and tokenizer.\n","\n","  3. **DataTrainingArguments**: These are as the name suggests arguments needed for the dataset. Such as the directory name where your files are stored etc. You'll need these to load/process the dataset.\n","\n","  TrainingArguments are already defined in the `TrainingArguments` class, you'll need to define `ModelArguments` and `DataTrainingArguments` classes for your task.\n","\n","\n","\n","\n","2. Load train and eval datasets\n","3. Initialize the `Trainer`\n","\n","    These are the mininum parameters which you'll for initializing `Trainer`. For full list check [here](https://github.com/huggingface/transformers/blob/master/src/transformers/trainer.py#L107)\n","\n","    ```\n","      model: PreTrainedModel\n","      args: TrainingArguments\n","      train_dataset: Optional[Dataset]\n","      eval_dataset: Optional[Dataset]\n","    ```\n","4. Start training with  `trainer.train`\n","\n","    Call `trainer.train` and let the magic begin!\n","\n","\n","There are lots of things which the trainer handles for you out of the box such as gradient_accumulation, fp16 training, setting up the optimizer and scheduler, logging with wandb etc. I didn't set-up wandb for this experiment, but will explore it for sure in future experiment."]},{"cell_type":"code","metadata":{"id":"KdmKlMkfcLa0","executionInfo":{"status":"aborted","timestamp":1696907239652,"user_tz":-480,"elapsed":7,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["import dataclasses\n","import logging\n","import os\n","import sys\n","from dataclasses import dataclass, field\n","from typing import Dict, List, Optional\n","\n","import numpy as np\n","import torch\n","\n","from transformers import T5ForConditionalGeneration, T5Tokenizer, EvalPrediction\n","from transformers import (\n","    HfArgumentParser,\n","    DataCollator,\n","    Trainer,\n","    TrainingArguments,\n","    set_seed,\n",")\n","\n","\n","logger = logging.getLogger(__name__)\n","\n","# prepares lm_labels from target_ids, returns examples with keys as expected by the forward method\n","# this is necessacry because the trainer directly passes this dict as arguments to the model\n","# so make sure the keys match the parameter names of the forward method\n","@dataclass\n","class T2TDataCollator(DataCollator):\n","    def collate_batch(self, batch: List) -> Dict[str, torch.Tensor]:\n","        \"\"\"\n","        Take a list of samples from a Dataset and collate them into a batch.\n","        Returns:\n","            A dictionary of tensors\n","        \"\"\"\n","        input_ids = torch.stack([example['input_ids'] for example in batch])\n","        lm_labels = torch.stack([example['target_ids'] for example in batch])\n","        lm_labels[lm_labels[:, :] == 0] = -100\n","        attention_mask = torch.stack([example['attention_mask'] for example in batch])\n","        decoder_attention_mask = torch.stack([example['target_attention_mask'] for example in batch])\n","\n","\n","        return {\n","            'input_ids': input_ids,\n","            'attention_mask': attention_mask,\n","            'lm_labels': lm_labels,\n","            'decoder_attention_mask': decoder_attention_mask\n","        }\n","\n","\n","@dataclass\n","class ModelArguments:\n","    \"\"\"\n","    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.\n","    \"\"\"\n","\n","    model_name_or_path: str = field(\n","        metadata={\"help\": \"Path to pretrained model or model identifier from huggingface.co/models\"}\n","    )\n","    tokenizer_name: Optional[str] = field(\n","        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n","    )\n","    cache_dir: Optional[str] = field(\n","        default=None, metadata={\"help\": \"Where do you want to store the pretrained models downloaded from s3\"}\n","    )\n","\n","@dataclass\n","class DataTrainingArguments:\n","    \"\"\"\n","    Arguments pertaining to what data we are going to input our model for training and eval.\n","    \"\"\"\n","    train_file_path: Optional[str] = field(\n","        default='train_data.pt',\n","        metadata={\"help\": \"Path for cached train dataset\"},\n","    )\n","    valid_file_path: Optional[str] = field(\n","        default='valid_data.pt',\n","        metadata={\"help\": \"Path for cached valid dataset\"},\n","    )\n","    max_len: Optional[int] = field(\n","        default=512,\n","        metadata={\"help\": \"Max input length for the source text\"},\n","    )\n","    target_max_len: Optional[int] = field(\n","        default=32,\n","        metadata={\"help\": \"Max input length for the target text\"},\n","    )\n","\n","\n","def main():\n","    # See all possible arguments in src/transformers/training_args.py\n","    # or by passing the --help flag to this script.\n","    # We now keep distinct sets of args, for a cleaner separation of concerns.\n","\n","    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n","\n","    # we will load the arguments from a json file,\n","    #make sure you save the arguments in at ./args.json\n","    model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath('args.json'))\n","\n","    if (\n","        os.path.exists(training_args.output_dir)\n","        and os.listdir(training_args.output_dir)\n","        and training_args.do_train\n","        and not training_args.overwrite_output_dir\n","    ):\n","        raise ValueError(\n","            f\"Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"\n","        )\n","\n","    # Setup logging\n","    logging.basicConfig(\n","        format=\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\",\n","        datefmt=\"%m/%d/%Y %H:%M:%S\",\n","        level=logging.INFO if training_args.local_rank in [-1, 0] else logging.WARN,\n","    )\n","    logger.warning(\n","        \"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\",\n","        training_args.local_rank,\n","        training_args.device,\n","        training_args.n_gpu,\n","        bool(training_args.local_rank != -1),\n","        training_args.fp16,\n","    )\n","    logger.info(\"Training/evaluation parameters %s\", training_args)\n","\n","    # Set seed\n","    set_seed(training_args.seed)\n","\n","    # Load pretrained model and tokenizer\n","    #\n","    # Distributed training:\n","    # The .from_pretrained methods guarantee that only one local process can concurrently\n","    # download model & vocab.\n","\n","    tokenizer = T5Tokenizer.from_pretrained(\n","        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,\n","        cache_dir=model_args.cache_dir,\n","    )\n","    model = T5ForConditionalGeneration.from_pretrained(\n","        model_args.model_name_or_path,\n","        cache_dir=model_args.cache_dir,\n","    )\n","\n","    # Get datasets\n","    print('loading data')\n","    train_dataset  = torch.load(data_args.train_file_path)\n","    valid_dataset = torch.load(data_args.valid_file_path)\n","    print('loading done')\n","\n","    # Initialize our Trainer\n","    trainer = Trainer(\n","        model=model,\n","        args=training_args,\n","        train_dataset=train_dataset,\n","        eval_dataset=valid_dataset,\n","        data_collator=T2TDataCollator(),\n","        prediction_loss_only=True\n","    )\n","\n","    # Training\n","    if training_args.do_train:\n","        trainer.train(\n","            model_path=model_args.model_name_or_path if os.path.isdir(model_args.model_name_or_path) else None\n","        )\n","        trainer.save_model()\n","        # For convenience, we also re-save the tokenizer to the same directory,\n","        # so that you can share your model easily on huggingface.co/models =)\n","        if trainer.is_world_master():\n","            tokenizer.save_pretrained(training_args.output_dir)\n","\n","    # Evaluation\n","    results = {}\n","    if training_args.do_eval and training_args.local_rank in [-1, 0]:\n","        logger.info(\"*** Evaluate ***\")\n","\n","        eval_output = trainer.evaluate()\n","\n","        output_eval_file = os.path.join(training_args.output_dir, \"eval_results.txt\")\n","        with open(output_eval_file, \"w\") as writer:\n","            logger.info(\"***** Eval results *****\")\n","            for key in sorted(eval_output.keys()):\n","                logger.info(\"  %s = %s\", key, str(eval_output[key]))\n","                writer.write(\"%s = %s\\n\" % (key, str(eval_output[key])))\n","\n","        results.update(eval_output)\n","\n","    return results\n","\n","\n","def _mp_fn(index):\n","    # For xla_spawn (TPUs)\n","    main()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"15duw24hqMBy"},"source":["## Train"]},{"cell_type":"code","metadata":{"id":"n1I6IhBM1KV2","executionInfo":{"status":"aborted","timestamp":1696907239653,"user_tz":-480,"elapsed":8,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["import json"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zOvs9RUllLTw"},"source":["Let's write the arguments in a dict and store in a json file. The above code will load this file and parse the arguments."]},{"cell_type":"code","metadata":{"id":"2ObtXlBVuJqv","executionInfo":{"status":"aborted","timestamp":1696907239653,"user_tz":-480,"elapsed":139509,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["args_dict = {\n","  \"num_cores\": 8,\n","  'training_script': 'train_t5_squad.py',\n","  \"model_name_or_path\": 't5-base',\n","  \"max_len\": 512 ,\n","  \"target_max_len\": 16,\n","  \"output_dir\": './models/tpu',\n","  \"overwrite_output_dir\": True,\n","  \"per_gpu_train_batch_size\": 8,\n","  \"per_gpu_eval_batch_size\": 8,\n","  \"gradient_accumulation_steps\": 4,\n","  \"learning_rate\": 1e-4,\n","  \"tpu_num_cores\": 8,\n","  \"num_train_epochs\": 4,\n","  \"do_train\": True\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xU5MI8ju1L3w","executionInfo":{"status":"aborted","timestamp":1696907239653,"user_tz":-480,"elapsed":139508,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["with open('args.json', 'w') as f:\n","  json.dump(args_dict, f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AsQB1Kpjlltp"},"source":["Start training!"]},{"cell_type":"code","metadata":{"id":"UnGuDVPYuyo4","executionInfo":{"status":"aborted","timestamp":1696907239653,"user_tz":-480,"elapsed":139506,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["import torch_xla.distributed.xla_multiprocessing as xmp"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X9_Go99fvW-z","executionInfo":{"status":"aborted","timestamp":1696907239654,"user_tz":-480,"elapsed":139506,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["xmp.spawn(_mp_fn, args=(), nprocs=8, start_method='fork')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LAe5vnbi-dyx"},"source":["## Eval"]},{"cell_type":"markdown","metadata":{"id":"VxWscyGVl05C"},"source":["There are two gotchas here. First the metrics functionality in the nlp package is still work-in-progress so we will use the official squad evaluation script. Second, for some reason which I couldn't figure out, the `.generate` method is not working on TPU so will need to do prediction on CPU. For predicting the validation set it almost takes 40 mins."]},{"cell_type":"code","metadata":{"id":"H8AbD1B7TR0k","executionInfo":{"status":"aborted","timestamp":1696907239654,"user_tz":-480,"elapsed":139504,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["## SQuAD evaluation script. Modifed slightly for this notebook\n","\n","from __future__ import print_function\n","from collections import Counter\n","import string\n","import re\n","import argparse\n","import json\n","import sys\n","\n","\n","def normalize_answer(s):\n","    \"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"\n","    def remove_articles(text):\n","        return re.sub(r'\\b(a|an|the)\\b', ' ', text)\n","\n","    def white_space_fix(text):\n","        return ' '.join(text.split())\n","\n","    def remove_punc(text):\n","        exclude = set(string.punctuation)\n","        return ''.join(ch for ch in text if ch not in exclude)\n","\n","    def lower(text):\n","        return text.lower()\n","\n","    return white_space_fix(remove_articles(remove_punc(lower(s))))\n","\n","\n","def f1_score(prediction, ground_truth):\n","    prediction_tokens = normalize_answer(prediction).split()\n","    ground_truth_tokens = normalize_answer(ground_truth).split()\n","    common = Counter(prediction_tokens) & Counter(ground_truth_tokens)\n","    num_same = sum(common.values())\n","    if num_same == 0:\n","        return 0\n","    precision = 1.0 * num_same / len(prediction_tokens)\n","    recall = 1.0 * num_same / len(ground_truth_tokens)\n","    f1 = (2 * precision * recall) / (precision + recall)\n","    return f1\n","\n","\n","def exact_match_score(prediction, ground_truth):\n","    return (normalize_answer(prediction) == normalize_answer(ground_truth))\n","\n","\n","def metric_max_over_ground_truths(metric_fn, prediction, ground_truths):\n","    scores_for_ground_truths = []\n","    for ground_truth in ground_truths:\n","        score = metric_fn(prediction, ground_truth)\n","        scores_for_ground_truths.append(score)\n","    return max(scores_for_ground_truths)\n","\n","\n","def evaluate(gold_answers, predictions):\n","    f1 = exact_match = total = 0\n","\n","    for ground_truths, prediction in zip(gold_answers, predictions):\n","      total += 1\n","      exact_match += metric_max_over_ground_truths(\n","                    exact_match_score, prediction, ground_truths)\n","      f1 += metric_max_over_ground_truths(\n","          f1_score, prediction, ground_truths)\n","\n","    exact_match = 100.0 * exact_match / total\n","    f1 = 100.0 * f1 / total\n","\n","    return {'exact_match': exact_match, 'f1': f1}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FCZVPIUK9fyn","executionInfo":{"status":"aborted","timestamp":1696907239654,"user_tz":-480,"elapsed":139503,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["import torch\n","import torch_xla\n","import torch_xla.core.xla_model as xm\n","\n","import nlp\n","from transformers import T5ForConditionalGeneration, T5Tokenizer\n","\n","from tqdm.auto import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vmV9c-w39c7C","executionInfo":{"status":"aborted","timestamp":1696907240111,"user_tz":-480,"elapsed":4,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["model = T5ForConditionalGeneration.from_pretrained('models/tpu').to('cpu') # because its loaded on xla by default\n","tokenizer = T5Tokenizer.from_pretrained('models/tpu')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vjstID24-IAw","executionInfo":{"status":"aborted","timestamp":1696907240111,"user_tz":-480,"elapsed":4,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["valid_dataset = torch.load('valid_data.pt')\n","dataloader = torch.utils.data.DataLoader(valid_dataset, batch_size=32)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v7TUzb-T-YtF","executionInfo":{"status":"aborted","timestamp":1696907240111,"user_tz":-480,"elapsed":4,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["answers = []\n","for batch in tqdm(dataloader):\n","  outs = model.generate(input_ids=batch['input_ids'],\n","                        attention_mask=batch['attention_mask'],\n","                        max_length=16,\n","                        early_stopping=True)\n","  outs = [tokenizer.decode(ids) for ids in outs]\n","  answers.extend(outs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VJ7CFrEtLD4F","executionInfo":{"status":"aborted","timestamp":1696907240111,"user_tz":-480,"elapsed":4,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["predictions = []\n","references = []\n","for ref, pred in zip(valid_dataset, answers):\n","  predictions.append(pred)\n","  references.append(ref['answers']['text'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BDpnF6NmMWEl","executionInfo":{"status":"aborted","timestamp":1696907240111,"user_tz":-480,"elapsed":4,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["predictions[0], references[0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dtRfqm3Odgh1","executionInfo":{"status":"aborted","timestamp":1696907240111,"user_tz":-480,"elapsed":4,"user":{"displayName":"DING FENG","userId":"08114039084591127673"}}},"source":["evaluate(references, predictions)"],"execution_count":null,"outputs":[]}]}